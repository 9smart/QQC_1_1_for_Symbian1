/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \page qt-components-example-flickr.html
    \ingroup qt-components-example
    \title Flickr Example
    \brief Simple Flickr image viewer example

    This demo uses Qt Quick components to create a simple Flickr client. It
    shows a selection of the images that have most recently been added to
    Flickr. The chief purpose of the demo is to show how to use Qt Quick
    components to create a user interface that responds to orientation changes.

    It also  demonstrates the use of the following Qt Quick components: Window,
    Page, PageStack, Button, ProgressBar, TextField, Toolbar, ToolBarLayout,
    ToolButton, Slider, ScrollDecorator and StatusBar.

    Source:  \l {Flickr example source code}{Browse here}

    \image example-flickr-splash.png

    \section1 Application Structure

    The Flickr demo is almost completely written in QML. Qt Quick components are
    used to create the UI and a simple C++ wrapper collects the QML files and
    image files of the application into a single binary using the Qt resource
    system. The main.cpp sets the network proxy for the QApplication that runs
    the demo. Note that if FLICKR_FULLSCREEN is defined, then the demo will be compiled
    to run in fullscreen mode. This is required when compiling the application
    for mobile devices.

    The code in main.cpp sets the main QML file of the application to be
    flickr.qml which starts loading the first page and shows a splash screen
    for a short period while network requests to Flickr service are being made.

    \snippet demos/symbian/flickr/main.cpp 0

    \section1 flickr.qml

    The Window component is the root component of the application.
    It provides the means to react to orientation changes, as well
    as sizing the application.

    The PageStack component manages a stack of Page components,
    which in turn implement the different views of the Flickr
    application. There are three Page components in the application:

    \list
    \o ThumbnailPage: shows a list of image thumbnails in portrait orientation,
       and a grid of thumbnails in landscape orientation.
    \o LargeImagePage: a large image view that shows a larger version of a thumbnail.
    \o DetailsPage: implements a details view
       that shows detailed information about an image.
    \endlist

    All three Page components share a common ancestor, the FlickrPage component,
    which implements background graphics.

    The ToolBar component shows the buttons for the different Pages.
    A Page component can specify the a set of tools that automatically
    show up in the ToolBar when the page is on the top of the stack
    of pages in the PageStack.

    When the application starts the Component.onCompleted() handler
    in Window pushes the ThumbnailPage to the PageStack.

    The StatusBar and ToolBar are hidden based on \c largeImagePage.chromeOpacity.

    Note the use of the \c PageStack.replace() function, pressing on the rightmost
    button of the LargeImagePage will not increase the stack depth in PageStack,
    it will instead replace the LargeImagePage with a DetailsPage object with
    the id \c detailsPage. The LargeImagePage object will not be
    destroyed even if it is not in the PageStack as it is defined within the
    Window element in flickr.qml. The \c PageStack.replace() function is used similarly in
    the DetailsPage to replace itself with the id \c largeImagePage.

    \snippet demos/symbian/flickr/qml/flickr.qml 0

    \section1 Thumbnail Page

    When the Flickr application starts, it shows most recently added images
    from Flickr as thumbnails. The ThumbnailPage implements this view, it
    shows the thumbnails differently in portrait and landscape orientations.

    \snippet demos/symbian/flickr/qml/ThumbnailPage.qml 0

    The property \c inPortrait is used to control whether a list of
    thumbnails or a grid of thumbnails is loaded by a Loader element.
    The GridView component is loaded in \c !inPortrait mode and
    the ListView component in \c inPortrait mode. The \c inPortrait property
    is bound to \c window.inPortrait in flickr.qml.

    The GridView and ListView use a common specialized XmlListModel (PhotoFeedModel)
    that fetches the thumbnail information from an online feed provided by Flickr.
    Sharing the model reduces code duplication and
    improves performance as the shared model fetches the thumbnail
    information only once for both views.

    Image of the ThumbnailPage in portrait orientation:

    \image example-flickr-listview.png

    Image of the ThumbnailPage showing a grid of thumbnails in landscape orientation:

    \image example-flickr-gridview.png

    Image of the ThumbnailPage with the SearchBar visible:

    \image example-flickr-search.png

    The Flickr demo will show the a larger version of an image when the user
    clicks or taps on the thumbnail. This action is handled in the delegates
    of ListView and GridView, both emitting the \c photoClicked()
    signal that is handled in flickr.qml so that the LargeImagePage gets pushed
    to the PageStack with the function \c PageStack.push().

    \section1 LargeImage Page

    The LargeImagePage shows a larger version of an image that is flickable
    and zoomable.

    The LargeImagePage shows a ProgressBar while loading an image. Once the image
    is loaded, ProgressBar will be hidden and the actual image is shown.

    \snippet demos/symbian/flickr/qml/LargeImagePage.qml 0

    The Slider component is used to zoom the image, dragging the Slider handle scales
    the image creating a zoom effect.

    \snippet demos/symbian/flickr/qml/LargeImagePage.qml 1

    If the zoom level is such that the image is larger than the screen size, scroll
    decorators are visible. ScrollDecorator indicates the part of the image that
    is shown while flicking. The \c flickableItem property of ScrollDecorator is
    bound to the id \c flickable, which identifies the Flickable element that
    wraps the image.

    \snippet demos/symbian/flickr/qml/LargeImagePage.qml 2

    The following image depicts the LargeImagePage component in action, the scroll
    decorators are visible as the user has zoomed in on the image.

    \image example-flickr-scrolldecorator.png

    \section1 Details Page

    The Details page, implemented in the file DetailsPage.qml, shows detailed
    information of the image.

    \image example-flickr-details.png

*/
