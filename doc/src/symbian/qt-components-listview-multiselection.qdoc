/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!

    \page listview-multiselection-symbian.html
    \ingroup qt-components-pattern
    \ingroup qt-components-pattern-symbian
    \title Multi-Select Support for Symbian List Components

    \brief A list with individually selectable items

    You can use a \c ListView to set up a list with items that can be
    individually selected. The code snippets below demonstrate how to create the
    following list:

    \image symbian/listview_multiselection.png

    \section1 Creating the List View

    The following code snippet is a basic definition for a \c ListView. A
    \c ListView has a \c model property that defines the data to be displayed,
    and a \c delegate property that defines how the data should be displayed on the
    screen.

    \snippet src/snippets/symbian/snippet-listview-multiselection.qml 0


    \section1 Creating the Data Model

    The following code snippet defines a simple model for a multiselection list.
    It is implemented using a \c ListModel element and the items of the list
    are \c ListElements.

    \note
    Each item in the list \bold must include a data item to store the selection
    state of that item. In this example it is called \c selected. The delegate
    then uses the \c selected value to display the state visually to the user.

    \snippet src/snippets/symbian/snippet-listview-multiselection.qml 2

    \section1 Creating the ListItem Delegate

    The final thing to do is to create the delegate. This defines how the data
    is displayed to the user and also passes information about data changes back
    to the model. Delegates are instantiated as needed by the system and can be
    destroyed at any time - even while scrolling the list - so it is not safe to
    store state information only in the delegate. You must make the delegate
    update the model when the state of a item changes. Then your state
    information does not disappear when the delegate item is destroyed.

    The code snippet below defines a delegate with some texts and a check box.
    The \c ListView uses this delegate as a template to display the data for
    each item in the model onto the screen.

    \snippet src/snippets/symbian/snippet-listview-multiselection.qml 1

*/
