/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!

    \qmlclass Page
    \ingroup qt-components
    \since 1.0
    \inherits Item

    \brief Defines one screen of the user interface content.

    The screen area of a mobile device is small, so an application's user
    interface is often composed of a set of separate screens of content or
    "pages". You can use pages in conjunction with the PageStack component to
    provide a navigation system for your application. Another navigation
    alternative is the TabGroup component that provides parallel sets of content.

    See the \l{Page Based Application Navigation on Symbian} overview for a higher
    level discussion about pages and page stacks.

    \section1 Defining the Content of a Page

    Normally you base the pages (screens of content) of your application on the
    Page component but you can use other components or elements if you want.
    However, the benefit of the Page component is that it defines a contract how
    the page and the page stack interact. A Page component based page is
    notified when it becomes active or inactive and this allows you to perform
    various page-specific operations while the page is animated into the view or
    out of the view.

    You can implement an application page either as a \e {QML item} or a \e
    {QML component}. You can regard a QML item as a particular page object and a QML
    component as a class definition of page objects. If your page is an item, you
    use the page directly as you have defined it. If you want to use a component
    page, you have to create an instance of that component page and use that
    instance. PageStack works transparently with either type of the page.
    The main thing you need to consider is how long you want the page to stay
    in the memory.

    \section2 Example of a QML Page as an Item

    The code snippet below defines a page as an item. It is a page with a text
    that can be accessed externally.

    \snippet src/snippets/symbian/snippet-pagestack-page.qml 1


    \section2 Example of a QML page in a component file

    The page described above can also be declared in its own file. This is
    probably the type of a page you will use most often because it encapsulates
    the page in its own file making its maintenance easy. The following
    code snippet is from \c FilePage.qml file.

    \snippet src/snippets/symbian/FilePage.qml 0

    \section2 Example of a QML Component Page

    The page described earlier is an example of a simple page declared as a QML
    item. Declaring this same page as a component looks like this:

    \snippet src/snippets/symbian/snippet-pagestack-page.qml 0


    \section1 Defining Toolbar Contents of a Page

    The default value of \c tools is \c null resulting in the toolbar belonging
    to the PageStack to be invisible.

    If each Page in your application requires a different ToolBarLayout, then
    the PageStack can manage the ToolBar on your behalf. All that is required
    are the following steps:

     \list 1

         \o Set the PageStack::toolBar property of the PageStack to be a
         ToolBar instance

         \o Set the Page::tools property of each Page to be the appropriate
         ToolBarLayout instance that corresponds to that Page.

     \endlist

     When the current Page on the top of the PageStack changes, its tools will
     be set to be the ToolBarLayout contained within the ToolBar

     See the ToolBar documentation for more details and example code.

    \section1 Life Cycle Signals of a Page

    The page's life cycle phases are instantiation, activation, deactivation,
    and destruction. The following rules apply:

    \list

    \o The page can switch between activation and deactivation phases any number
    of times during its life cycle.

    \o When a page is activated it becomes visible on the screen and can be
    considered to be "the current" page.

    \o If the page stack is not visible, the top-most page in the stack is
    deactivated and is not visible.

    \o When the page stack becomes visible, the top-most page in the stack is
    activated.

    \o When the page stack is made hidden the top-most page is deactivated.

    \o When a any other than top-most page is popped off from the stack, it does
    not result in deactivation since the page is not active.

    \endlist

    The \c status property indicates the current state of the page. Combined
    with the normal \c Component.onCompleted() and \c Component.onDestruction()
    signals you can follow the entire life cycle of the page as follows:

    \list
      \o Created: Component.onCompleted()
      \o Activating: onStatusChanged (\c status is PageStatus.Activating)
      \o Activated: onStatusChanged (\c status is PageStatus.Active)
      \o Deactivating: onStatusChanged (\c status is PageStatus.Deactivating)
      \o Deactivated: onStatusChanged (\c status is PageStatus.Inactive)
      \o Destruction: Component.onDestruction()
    \endlist

    \sa PageStack, ToolButton, ToolBarLayout

*/

/*!
    \qmlproperty  int Page::status

    The current status of the page. It can be one of the following values:

    \list

      \o PageStatus.Inactive (default) - the page is not visible.

      \o PageStatus.Activating - the page is becoming the active page.

      \o PageStatus.Active - the page is the currently active page.

      \o PageStatus.Deactivating - the page is becoming an inactive page.

    \endlist
*/

/*!
    \qmlproperty PageStack Page::pageStack

    The page stack that this page is owned by.
*/

/*!
    \qmlproperty int Page::orientationLock

    Defines the page's orientation. It can have the following values:

    \list

        \o PageOrientation.Automatic (default) - the page's orientation switches
        automatically to match the device's orientation.

        \o PageOrientation.LockPortrait - the page is locked in portrait
        orientation irrespective of the device's orientation.

        \o PageOrientation.LockLandscape - the page is locked in landscape
        orientation irrespective of the device's orientation.

        \o PageOrientation.LockPrevious - the page is locked to the current
        orientation. The page's orientation stays unchanged irrespective of the
        device's orientation.

    \endlist
*/

/*!
    \qmlproperty Item Page::tools

    Defines the toolbar contents for the page. If the page stack is set up using
    a toolbar instance, it automatically shows the currently active page's
    toolbar contents in the toolbar. The default value is \c null resulting in
    the page's toolbar to be invisible when the page is active.
*/
