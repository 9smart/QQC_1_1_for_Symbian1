/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmlclass TextField
    \ingroup qt-components
    \since 1.0
    \inherits FocusScopeItem

    \brief Provides a component for editing and displaying a single line of
    plain text.

    The TextField component displays a single line of editable plain text. You
    can place input constraints for a TextField component, for example, through
    a \l validator or \l inputMask. You can also set \l echoMode to an
    appropriate value for making the TextField suitable for a password input
    field. If the \c text content is longer than the TextField view port, the user
    can scroll the field horizontally. TextField is a superset of \l TextInput
    and it implements the Symbian-style look-and-feel. The clipboard support is
    provided by the \l cut(), \l copy(), and \l paste() functions.

    \section1 TextField Basic Examples

    The code examples below illustrate various features of TextField.

    \table
    \header
        \o Code
        \o Appearance
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 0
        \o \image symbian/textfield_empty.png
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 1
        \o \image symbian/textfield_placeholdertext.png
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 2
        \o \image symbian/textfield_text.png
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 3
        \o \image symbian/textfield_text_focus.png
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 4
        \o \image symbian/textfield_flick.png
           \caption Appearance while draging. See the \l {Touch Interaction} section.
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 5
        \o \image symbian/textfield_readonly_disabled.png
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 6
        \o \image symbian/textfield_readonly_disabled.png
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 7
        \o \image symbian/textfield_error.png
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 8
        \o \image symbian/textfield_error.png
    \row
        \o \snippet src/snippets/symbian/snippet-textfield.qml 9
        \o \image symbian/textfield_password.png
    \endtable

    \section1 TextField Selection in Symbian

     The examples below illustrate various TextField selection features in
     Symbian. Different options become available when the user selects a piece of
     text.

    \table
    \row
        \table
            \header
            \o Selected Text
            \o Adjust Selection
            \row
                \o \image symbian/textfield_selected_text.png
                \o \image symbian/textfield_adjust_selection.png
        \endtable
    \row
        \table
            \header
            \o Place Cursor
            \o Paste Menu
            \row
                \o \image symbian/textfield_place_cursor.png
                \o \image symbian/textfield_paste.png
        \endtable
    \endtable

    \section1 Custom buttons to TextField

    This section shows examples how to add a custom button and operations into a
    TextField component.

    \section2 TextField with Clear Button
    \image symbian/textfield_clear.png
    \snippet src/snippets/symbian/snippet-textfield-custom.qml 0

    \section2 TextField with Custom Operation
    \image symbian/textfield_custom.png
    \snippet src/snippets/symbian/snippet-textfield-custom.qml 1

    \section2 TextField with Search
    \image symbian/textfield_search.png
    \snippet src/snippets/symbian/snippet-textfield-custom.qml 2
*/

/*!
    \qmlproperty real TextField::platformLeftMargin

    Specifies the text's left margin in the TextField.

    \image symbian/textfield_leftmargin.png
*/

/*!
    \qmlproperty real TextField::platformRightMargin

    Specifies the text's right margin in the TextField.

    \image symbian/textfield_rightmargin.png
*/

/*!
    \qmlproperty bool TextField::enabled


    If the value is \c true, the user can interact with the TextField; otherwise
    not.

    The default value is \c true.

    \sa readOnly

*/

/*!
    \qmlproperty bool TextField::errorHighlight

    If the value is \c true, the TextField's graphics show that it contains
    invalid input; otherwise not. By default, this property responds to a
    validator you have set.

    See the \l {TextField Basic Examples} section for an example.

    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html#validator-prop}{TextInput::validator}

*/

/*!
    \qmlproperty string TextField::placeholderText

    The placeholder text that is shown in the TextField to hint at the expected
    input. The placeholder text is shown in the text field as long as it has no
    focus and the user has not entered any text to the TextField. The default
    value of placeholderText is an empty string.

      See the \l {TextField Basic Examples} section for an example.

*/

/*!
    \qmlproperty int TextField::inputMethodHints

    Settings that indicate what kind of input the TextField accepts. The
    possible values are the same as those defined for \l {http://doc.qt.nokia.com/stable/qwidget.html#inputMethodHints-prop}{Qt::InputMethodHints}.

    \sa {http://doc.qt.nokia.com/stable/qwidget.html#inputMethodHints-prop}{Qt::InputMethodHints}

*/

/*!
    \qmlproperty int TextField::maximumLength

   The maximum permitted length of the text in the TextField. If the text is too
   long, it is truncated at the limit. By default the value is \c 32767.

    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html#maximumLength-prop}{TextInput::maximumLength}

*/

/*!
    \qmlproperty font TextField::font

    The text's font information in the TextField. The possible values are the
    same as those defined for \l {http://doc.qt.nokia.com/4.8/qml-textinput.html}{TextInput}.

    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html}{TextInput}

*/

/*!
    \qmlproperty int TextField::cursorPosition

    The position of the cursor in a TextField.

    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html#cursorPosition-prop}{TextInput::cursorPosition}

*/

/*!
    \qmlproperty bool TextField::readOnly

    If the value is \c true, the user can interact (select, copy, and scroll)
    with but not edit the TextField's text. If the value is \c false, the user can
    also edit the text.

      See the \l {TextField Basic Examples} section for an example.
    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html#readOnly-prop}{TextInput::readOnly}, enabled
*/

/*!
    \qmlproperty int TextField::echoMode

    Specifies how the text is displayed when the user enters text into
    the TextField.  For example, you can set the echo mode to \c Password so
    that the entered text is shown as asterisks. The possible values are the
    same as those defined for \l {http://doc.qt.nokia.com/4.8/qml-textinput.html#echoMode-prop}{TextInput::echoMode}.

    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html#echoMode-prop}{TextInput::echoMode}

*/

/*!
    \qmlproperty bool TextField::acceptableInput

    Indicates whether or not the current text the user enters is acceptable as
    a final string. The value is \c true in the following cases:

    \list
    \o The validator or input mask is not set.
    \o The text is acceptable for the set validator or input mask.
    \endlist

    Otherwise the value is \c false.

    \sa inputMask, validator, {http://doc.qt.nokia.com/4.8/qml-textinput.html#acceptableInput-prop}{TextInput::acceptableInput}

*/

/*!
    \qmlproperty string TextField::inputMask

    Allows you to restrict what the user can enter into the TextField.
    TextField, TextInput, and QLineEdit use the same input mask. See
    \l{QLineEdit::inputMask} for details how to define the input mask.

    \sa acceptableInput, validator, {http://doc.qt.nokia.com/4.8/qml-textinput.html#inputMask-prop}{TextInput::inputMask}
*/

/*!
    \qmlproperty validator TextField::validator

    Allows you to set a validator (\l IntValidator, \l DoubleValidator, or
    RegExpValidator) for the text field. See \l {http://doc.qt.nokia.com/4.8/qml-textinput.html#validator-prop}{TextInput::validator} for
    details.

    \sa acceptableInput, inputMask
*/

/*!
    \qmlproperty string TextField::selectedText

    The currently selected text in the text field.


    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html#selectedText-prop}{TextInput::selectedText}
*/

/*!
    \qmlproperty int TextField::selectionEnd

    The cursor position after the last character in the current selection.

    \sa selectionStart, selectedText, cursorPosition, {http://doc.qt.nokia.com/4.8/qml-textinput.html#selectionEnd-prop}{TextInput::selectionEnd}

*/

/*!
    \qmlproperty int TextField::selectionStart

    The cursor position before the first character in the current selection.

    \sa selectionEnd, selectedText, cursorPosition, {http://doc.qt.nokia.com/4.8/qml-textinput.html#selectionStart-prop}{TextInput::selectionStart}

*/

/*!
    \qmlproperty string TextField::text

    The text that has been entered into the text field.

    \sa placeholderText

*/

/*!
    \qmlmethod TextField::copy()

    Copies the currently selected text to the system clipboard.

    \sa paste, cut, {http://doc.qt.nokia.com/4.8/qml-textinput.html#copy-method}{TextInput::copy()}

*/

/*!
    \qmlmethod TextField::paste()

    Replaces the currently selected text by the contents of the system
    clipboard.

    \sa copy, cut, {http://doc.qt.nokia.com/4.8/qml-textinput.html#paste-method}{TextInput::paste()}
*/

/*!
    \qmlmethod TextField::cut()

    Moves the currently selected text to the system clipboard.

    \sa copy, paste, {http://doc.qt.nokia.com/4.8/qml-textinput.html#cut-method}{TextInput::cut()}
*/

/*!
    \qmlmethod TextField::select(start, end)

    Selects the text from \a start to \a end.


    \sa selectionStart, selectionEnd, {http://doc.qt.nokia.com/4.8/qml-textinput.html#select-method}{TextInput::select()}
*/

/*!
    \qmlmethod TextField::selectAll()

    Selects all the text in the text field.

    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html#selectAll-method}{TextInput::selectAll()}

*/

/*!
    \qmlmethod TextField::selectWord()

    Selects the word closest to the current cursor position.

    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html#selectWord-method}{TextInput::selectWord()}

*/

/*!
    \qmlmethod TextField::positionAt(x)

    Returns the character position at \c x pixels from the left edge of the text
    field.

    \sa {http://doc.qt.nokia.com/4.8/qml-textinput.html#positionAt-method}{TextInput::positionAt()}

*/


/*!
    \qmlmethod TextField::positionToRectangle(pos)

    Returns the rectangle that the cursor would occupy if it was placed at \a
    pos character position.

    This is similar to setting the \c cursorPosition, and then querying the
    cursor rectangle, but the \c cursorPosition is not changed.

    \sa cursorPosition, {http://doc.qt.nokia.com/4.8/qml-textinput.html#positionToRectangle-method}{TextInput::positionToRectangle()}

*/

/*!
    \qmlmethod TextField::openSoftwareInputPanel()

    Opens the virtual keyboard for typing. On Symbian-based devices the user can
    open the virtual keyboard by tapping the TextField.

    \sa closeSoftwareInputPanel, {http://doc.qt.nokia.com/4.8/qml-textinput.html#openSoftwareInputPanel-method}{TextEdit::openSoftwareInputPanel()}
*/

/*!
    \qmlmethod TextField::closeSoftwareInputPanel()

    Closes the virtual keyboard shown on the screen. On Symbian-based devices
    the user can open the virtual keyboard by tapping the TextField.

    \note Currently closeSoftwareInputPanel does not work on Symbian. For more information, see \l
    {http://bugreports.qt.nokia.com/browse/QTBUG-20033}{QTBUG-20033}.

    \sa openSoftwareInputPanel, {http://doc.qt.nokia.com/4.8/qml-textinput.html#closeSoftwareInputPanel-method}{TextEdit::closeSoftwareInputPanel()}
*/

/*!
    \qmlproperty bool TextField::platformInverted
    \since 1.1

    \e {Symbian:}

    If platformInverted is \c true, the component is visualized with the
    inverted style. For more information, see
    \l {Using Inverted Style with Symbian Components}. By default
    platformInverted is \c false.
*/
