/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/
/*!

    \qmlclass Window
    \ingroup qt-components
    \since 1.0
    \inherits Item

    \brief Provides a component that is normally the application's root
    component and handles transitions when the user rotates the screen.

    An application can be in the portrait or the landscape orientation. A user
    can physically rotate the device between these orientations, so you may want
    to layout the application's content differently depending on the screen's
    orientation. When the user rotates the screen, Window sends various signals
    at different phases of the rotation. Window handles also the resizing of the
    screen and possible transitions when the orientation changes. Normally all
    applications utilizing QtQuick Components for Symbian use Window as the root
    item.

    The orientation change animation will be fixed in a Qt Quick Components for
    Symbian release in future. Qt Quick Components version number will not be
    increased. To make your application future-proof, do not refer to the Window
    id when you anchor children to the Window - refer to the parent instead.

    Wrong (child anchoring refers to the Window id):
    \code
    Window {
        id: root

        Statusbar { anchors.top: root.top }

        ToolBar { anchors.bottom: root.bottom }
    }
    \endcode

    Correct (child anchoring refers to the parent):
    \code
    Window {
        id: root

        Statusbar { anchors.top: parent.top }

        ToolBar { anchors.bottom: parent.bottom }
    }
    \endcode
*/

/*!
    \qmlproperty bool Window::inPortrait

    If the screen is in the portrait orientation, the value is \c true. If the screen
    is in the landscape orientation, the value is \c false.

*/


/*!
    \qmlsignal Window::orientationChangeAboutToStart()

    This signal is emitted when the screen orientation starts to change from one
    orientation to another. After this signal is emitted
    \list
    \o you can start to prepare your application for the new screen orientation.
    For example, you can stop all screen animations.
    \o the \c inPortrait property indicates the new orientation.
    \endlist

*/

/*!
    \qmlsignal Window::orientationChangeStarted()

    This signal is emitted when the orientation change transition, for example
    screen transition animation, starts.

*/

/*!
    \qmlsignal Window::orientationChangeFinished()

    This signal is emitted when the orientation change transition, for example
    screen transition animation, ends.

*/

/*!
    \qmlproperty bool Window::platformInverted
    \since 1.1

    \e {Symbian:}

    If platformInverted is \c true, the component is visualized with the
    inverted style. For more information, see
    \l {Using Inverted Style with Symbian Components}. By default
    platformInverted is \c false.
*/
