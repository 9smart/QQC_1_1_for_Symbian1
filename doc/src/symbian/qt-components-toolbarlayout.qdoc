/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \qmlclass ToolBarLayout
    \ingroup qt-components
    \since 1.0
    \inherits Item

    \brief Provides a container for items on a \l{ToolBar} that automatically
    implements an appropriate layout for its children.

    For more information, the \l{ToolBar} documentation has suggestions on how
    to use a ToolBarLayout. It provides various use cases, for example,
    attaching a ToolBarLayout to a Page.

    \sa ToolBar, ButtonRow, ToolButton, TabButton, Page

    \section1 Using the ToolBarLayout

    The ToolBarLayout is meant for specifying the tools within a \l{ToolBar}.
    The ToolBarLayout is a container that calculates the child positions based
    on platform-specific rules.

    \section2 Basic Usage

    In this example, there is a simple ToolBarLayout that must be set to be the
    tools of a ToolBar (or Page) at some point. The screenshot below each code
    snippet shows the result of that code snippet.

    \snippet src/snippets/symbian/snippet-toolbar-menu.qml toolbarlayout1

    In most cases, the layout should contain a back ToolButton and a menu
    ToolButton.

    \image symbian/toolbarlayout_basic.png

    \section2 Using a ToolBarLayout with ToolButton

    It is possible to add a number of ToolButton instances that contain icons.

    \snippet src/snippets/symbian/snippet-toolbar-settools.qml toolbarlayout3a

    \image symbian/toolbarlayout_toolbutton_icon.png

    It is also possible to add a number of ToolButton instances that contain text.

    \snippet src/snippets/symbian/snippet-toolbar-in-page.qml toolbarlayout2

    \image symbian/toolbarlayout_toolbutton_text.png

    However, it is recommended that you use either text or icons for all the
    remaining ToolButton instances, and avoid mixing up the two types (not
    counting the back button and menu button which should always contain
    icons).

    \section2 Missing Items

    In most cases, it is recommended that the back button and the menu button
    are shown in the ToolBar. However, in some cases it may be desirable
    or necessary to hide them. By setting either or both of the buttons to be
    hidden, they reserve space in the layout.

    \snippet src/snippets/symbian/snippet-toolbar-settools.qml toolbarlayout2

    \image symbian/toolbarlayout_toolbutton_icon_missing.png


    \section2 Using a ToolBarLayout with ButtonRow

    ToolBarLayout provides some special behavior when a ButtonRow is contained
    as a child item. The correct combination of child items can be used to
    achieve good quality layouts that still take advantage of the available
    screen real estate.

    Consider the following example of a media player application. The media
    transport controls can be placed inside the ToolBar, but if they are first
    contained by a ButtonRow, then the behavior provides the appearance of a
    traditional "Cassette Recorder" controls. Here, the buttons are designed to
    mechanically move into the pressed state in order to illustrate the current
    playback state in a tactile way, whilst the segmented appearance is
    reminiscent of classic hardware design for the keypad arrangement.

    \snippet src/snippets/symbian/snippet-toolbar-settools.qml toolbarlayout3b

    \image symbian/toolbarlayout_toolbutton_buttonrow_icon.png

    Note that in this case the back and menu buttons are present, so that the
    ButtonRow occupies only the central area.

    However, if either of the first or last icon ToolButton instances are
    missing, and if the ButtonRow contains a sufficient number of ToolButtons,
    then the layout will automatically adjust to utilize the optimum amount of
    screen space.

    \snippet src/snippets/symbian/snippet-toolbar-settools.qml toolbarlayout4a

    \image symbian/toolbarlayout_toolbutton_buttonrow_icon_long.png

    Note also that in this case, the checkedButton belonging to the ButtonRow
    has been set to the item that should be checked by default. In the case of
    a media transport, the initial state is "stop" in this implementation.

    \section1 Layout rules for ToolBarLayout

    In the case of a Symbian toolbar, the layout rules are as follows:

    \list 1

        \o All children of the ToolBarLayout are considered part of the layout,
        but special meaning is given to the first and last children (if they
        are a ToolButton with an icon). These correspond to the back ToolButton
        and the menu ToolButton.

        \o If there is an icon ToolButton in the leftmost position, then
        it must always use the "toolbar-back" icon, so that it is consistent
        with all other applications. This is referred to as the "back button".

        \o The back button occupies the leftmost space, separated with a margin
        in landscape. If there is no back button, or if a non-visible button is
        placed there, the space is left deliberately blank.

        \o The last icon ToolButton occupies the rightmost space. If there is
        no last icon ToolButton, or if a non-visible button is placed there,
        the space is left deliberately blank.

        \o If the remaining items are text ToolButton instances, they are
        distributed around the center of empty space in the middle of toolbar.
        In landscape, the size is always the size as if there are two buttons
        (even if there is only one). In portrait, there is extra spacing on
        each side, and the single item fills the remaining space.

        \o If the remaining items are icon ToolButton instances, they are
        distributed evenly along the remaining area. The spacings are equal
        size in pixels, and any rounding is shared between left and right hand
        margins.

        \o If the remaining item is a ButtonRow with one item, it behaves like
        a single ToolButton containing text (but in that case it is recommended
        to just use a tool button). If it has two texts or two icons, it fills
        the space as if there is a left and right hand icon present. If it has
        three or more icons, it fills the available remaining space (with
        special margins) depending on whether the left and right icon
        ToolButtons are present.

    \endlist

    \section1 Restrictions on ToolBarLayout support for child items

    Child items that are not ButtonRow or ToolButton are not guaranteed to fit.
    However, if a component happens to fit into the vertical space of the
    ToolBar (which may be different in landscape orientation), then it is
    possible to place other components inside the ToolBarLayout. In this case,
    the implicit size or size of the item will be used to space out the items
    evenly, but behaviour is not guaranteed.

    Avoid placing too many items in the ToolBar as they may not fit within the
    portrait screen width. In the case of ToolButtons, the following
    combinations are supported (although additional items may fit at a
    particular screen size):

    \table

        \header
            \o
            \o {4, 1} Configuration

        \row

            \o Back item present?
            \o 0
            \o 0
            \o 1
            \o 1

        \row

            \o Menu item present?
            \o 0
            \o 1
            \o 0
            \o 1

        \header
            \o
            \o {4, 1} Number of items supported

        \row

            \o ToolButton > Icon
            \o 3
            \o 3
            \o 3
            \o 3

        \row

            \o ToolButton > Text
            \o 2
            \o 2
            \o 2
            \o 2

        \row

            \o ButtonRow > ToolButton > Icon
            \o 5
            \o 4
            \o 4
            \o 3

        \row

            \o ButtonRow > ToolButton > Text
            \o 3
            \o 3
            \o 3
            \o 2

    \endtable

    So, for example, in the case of a back button plus a menu button, it is
    possible to fit 3 ToolButtons containing icons in the remaining space. So
    the rules are:

    \list

        \o If the back and menu buttons are present or not visible, then the
        remaining space allows 2 text ToolButton instances, or 3 icon
        ToolButton instances (whether within a ButtonRow or not).

        \o If the back or menu buttons are missing, and there is a ButtonRow,
        then the remaining space allows different combinations of items,
        according to the values described in the table.

    \endlist

    In practice, for a given Screen Device Profile, you may be able to fit
    additional children. However, it is not guaranteed that they will fit in
    all supported Screen Device Profiles. It is recommended that you stay
    within these limits in order to guarantee that the layout will always look
    correct.

*/


/*!
     \qmlproperty  bool ToolBarLayout::backButton

    \e Deprecated.

     Do not use this property. If you need to create a ToolBarLayout that does
     not have a back button at the left hand position, but the first child is also
     a ToolButton that contains an icon and no text, then the following approach
     should be used:

    \snippet src/snippets/symbian/snippet-toolbar-settools.qml toolbarlayout1

    In this example, the ToolButton in the first and last positions are set to be
    not visible. However, the ToolBarLayout still reserves space for them in
    the layout.

*/

