/****************************************************************************
**
** Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the Qt Components project.
**
** $QT_BEGIN_LICENSE:FDL$
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file.
**
** Other Usage
** Alternatively, this file may be used in accordance with the terms
** and conditions contained in a signed written agreement between you
** and Nokia.
**
**
**
**
** $QT_END_LICENSE$
**
****************************************************************************/
/*!

    \qmlclass Button
    \ingroup qt-components
    \since 1.0
    \inherits Item

    \brief
    Provides a button with an icon and a text that the user can click.

    A button component enables the user to perform a command. The button has a
    rectangular shape and typically there is a text describing its command and
    an icon shown on the button. When the user presses the button, it sends a
    clicked signal. When a button has the focus, the button can be pressed using
    the \c Qt.Key_Select, \c Qt.Key_Return, and \c Qt.Key_Enter hardware keys
    that will send the clicked signal.

    You can set a button to be a toggle button by enabling the \c checkable
    property. A toggle button is a button that can be set to two states, 'on'
    and 'off'. A toggle button is 'on' when its \c checked property is \c true;
    otherwise the button is 'off'. If the toggle button's state is 'on', its
    background is highlighted, otherwise it looks the same as a button that is
    not a toggle button. The user can click the toggle button to switch it 'on'
    or 'off', for example, to switch between bold and plain style in selected
    text.

    In Symbian environment the button can also respond to a long-press. The button sends platformPressAndHold
    signal once when the user presses the button for a long period of time. If the
    button's platformAutoRepeat property is \c true, the button sends the clicked signal
    repeatedly as long as the user presses the button.

    \target Responding to a long-press
    \section1 Responding to a long-press

    \note This use case illustrates the Symbian-specific platformAutoRepeat property as well
    as the platformPressAndHold and platformReleased signals.

    You can define how a button responds to a long-press by using the button's
    \c platformAutoRepeat property. When the button is pressed, it
    sends:

    \list
    \o a clicked signal as long as the button is pressed if its platformAutoRepeat
    property is \c true.
    \o a platformPressAndHold signal if the button is pressed for a long period of time.
    \endlist

    In this example the user can enable and disable the 'Signals' button's (id:
    btnSignals) platformAutoRepeat property with the \c platformAutoRepeat check box.

    \snippet src/snippets/symbian/snippet-button.qml 1

    The 'Signals' button's platformAutoRepeat property is bound to the \c 
    platformAutoRepeat checkbox's \c checked property. When the user 
    checks/unchecks the \c platformAutoRepeat checkbox, the 'Signals' button's 
    platformAutoRepeat property is set/unset respectively.

    The application shows what signals the 'Signals' button sends depending on the
    platformAutoRepeat value and the duration of the pressing. The button
    sends:

    \list
    \o a platformReleased signal every time the user releases the 'Signals' button.
    \o a clicked signal when the user presses and then releases the 'Signals'
    button in a short period of time, regardless of the platformAutoRepeat
    value.
    \o a clicked signal repeatedly as long as the user keeps the 'Signals'
    button pressed if the button's platformAutoRepeat property is \c true. The sending
    starts after a short delay.
    \o a platformPressAndHold signal when the user keeps the 'Signals' button pressed.
    \endlist

    \snippet src/snippets/symbian/snippet-button.qml 0

    The screenshot below illustrates the case where the user has set the
    'Signals' button's platformAutoRepeat property to \c true. When the user presses the
    'Signals' button it sends a clicked signal repeatedly as long as the user
    keeps the button pressed. When the user releases the button it
    sends in Symbian environment a platformReleased signal.

    \image symbian/button_platformautorepeat.png

    \section1 Using a button as a toggle button.

    A button can be used as a toggle button when its \c checkable property is
    \c true. The user can switch the toggle button 'on' and 'off' by pressing
    it.

    In this example the user can enable and disable the button's \c checkable
    property with the checkable check box. The 'Signal' button's \c checkable
    property is bound to \c checkable checkbox's checked property in the same
    way as its platformAutoRepeat property in the
    \l {Responding to a long-press} use case.

    The screenshot below illustrates the case where the 'Signals' button is used
    as a toggle button. The user has changed the 'Signals' button to a toggle
    button by checking the checkable check box. Then the user has switched 'on'
    the 'Signals' button by clicking it. When the user presses and then releases
    the button it sends a 'clicked' signal and in Symbian environment also
    a 'platformReleased' signal.

    \image symbian/button_checkable.png

*/

/*!

    \qmlproperty bool Button::checkable

    If a button's \c checkable property is \c true, it can be used as a toggle
    button. The toggle button can be switched between two states, 'on' and
    'off'. The \c checkable value is \c false by default.

    \sa Button::checked

*/

/*!
    \qmlproperty bool Button::checked

     The toggle button is:

    \list
    \o 'on', if its checked value is \c true.
    \o 'off', if its checked value is \c false. The default value if \c false.
    \endlist

    \sa Button::checkable
*/

/*!
    \qmlproperty font Button::font

     Holds the font of the button's label.

*/

/*!
    \qmlsignal Button::clicked()

    This signal is emitted after the button is pressed and then released.

    The signal handler, onClicked(), can bind to state changes or other actions.

*/

/*!
    \qmlproperty url Button::iconSource

    URL for the icon that is displayed on the button. By default there is no
    icon.

*/


/*!
    \qmlproperty bool Button::pressed

    Indicates if the button is currently pressed or not.
*/


/*!
    \qmlproperty string Button::text

    The text is displayed as the button's label. The default \c text is an
    empty string.
*/

/*!
    \qmlsignal Button::platformReleased()

    \e {Symbian:}

    This signal is emitted when the button is pressed and then released.
*/

/*!
    \qmlsignal Button::platformPressAndHold()

    \e {Symbian:}

    This signal is emitted when the button is pressed for a long time.

*/

/*!
    \qmlproperty bool Button::platformAutoRepeat

    \e {Symbian:}

    If platformAutoRepeat is \c true, the clicked() signal is emitted repeatedly as long
    as the button is pressed. By default platformAutoRepeat is \c false.
*/

/*!
    \qmlproperty bool Button::platformInverted
    \since 1.1

    \e {Symbian:}

    If platformInverted is \c true, the component is visualized with the
    inverted style. For more information, see
    \l {Using Inverted Style with Symbian Components}. By default
    platformInverted is \c false.
*/
